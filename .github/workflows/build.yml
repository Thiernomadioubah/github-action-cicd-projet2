# Nom du `workflow`
name: CI/CD workflow

# Événements déclenchant le `workflow`
on:
  push:  # Déclenche le `workflow` lors d'un `push`
    branches:  # Filtrer les branches
      - main  # Exécute sur la branche `main`
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  SERVER_USER: "root"
  SERVER_PROD_IP: "165.227.156.7"
# Liste des jobs
jobs:
  tests_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: installer Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: installer les dépendances
        run: npm ci --prefer-offline
      - name: vérifie les vulnérabilités
        run: npm audit --audit-level=moderate
      - name: vérifie le code
        run: npm run lint
    # On pourrait lancer des tests unitaires ici

  tests_backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: node-api
    steps:
      - name: checkout le code
        uses: actions/checkout@v4
      - name: installer Node.js
        uses: actions/setup-node@v4 # défaut = LTS
        with:
          cache: 'npm'
          cache-dependency-path: node-api/package-lock.json
      - name: installer les dépendances
        run: npm ci --prefer-offline
      - name: exécute les tests
        run: npm run test:ci
      - name: vérifie le code
        run: npm run lint
      - name: vérifie les vulnérabilités
        run: npm audit --audit-level=moderate
      - name: Upload du rapport de couverture sur Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  build:  # Nom du job
    runs-on: ubuntu-latest  # S'exécute sur la dernière version d'Ubuntu
    permissions:  # Permissions nécessaires
      packages: write  # Autorisation d'écrire aux packages
    needs: [tests_backend,tests_frontend]
    # Stratégie de matrice pour exécuter des tâches en parallèle
    strategy:
      matrix:
        include:  # Inclure des variables supplémentaires
          - path: 'frontend'  # Lorsque le chemin est "frontend"
            full_image_name: ghcr.io/thiernomadioubah/github-action-cicd-projet2/frontend  # Nom complet de l'image pour "frontend"
            # full_image_name: ghcr.io/${{ github.repository }}/frontend  # Nom complet de l'image pour "frontend"
          - path: 'node-api'  # Lorsque le chemin est "node-api"
            full_image_name: ghcr.io/thiernomadioubah/github-action-cicd-projet2/node-api  # Nom complet de l'image pour "node-api"
            # full_image_name: ghcr.io/${{ github.repository }}/node-api  # Nom complet de l'image pour "node-api"


    # Étapes du job
    steps:
      - name: Checkout code  # Récupère le code source
        uses: actions/checkout@v4  # Utilise l'action GitHub pour le checkout

      - name: Mise en place de Buildx  # Configure Docker Buildx
        uses: docker/setup-buildx-action@v3  # Utilise l'action Buildx

      - name: Login sur GitHub Package Registry  # Connexion à GitHub Container Registry
        uses: docker/login-action@v3  # Utilise l'action de login Docker
        with:  # Avec ces paramètres
          registry: ghcr.io  # URL du registre
          username: ${{ github.actor }}  # Nom d'utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }}  # `GITHUB_TOKEN` pour l'authentification

      - name: Récupération des métadonnées  # Récupère les métadonnées pour Docker
        id: metadata  # ID pour cette étape
        uses: docker/metadata-action@v5  # Utilise l'action de métadonnées
        with:
          images: ${{ matrix.full_image_name }}  # Utilise le nom complet de l'image depuis la matrice

      - name: Build et push  # Construit et pousse l'image
        uses: docker/build-push-action@v5  # Utilise l'action de build et push Docker
        with:  # Avec ces paramètres
          push: true  # Pousse l'image
          tags: ${{ matrix.full_image_name }}:latest  # Tags pour l'image
          context: ./${{ matrix.path }}  # Contexte pour la construction Docker
          cache-from: type=gha  # Utilise le cache GitHub Actions
          cache-to: type=gha,mode=max  # Enregistre le cache pour les utilisations futures
  
  e2e:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login sur GitHub Package Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lancement des tests E2E
        run: docker compose up --exit-code-from cypress --abort-on-container-exit
      - name: Nettoyage
        run: docker compose down -v --remove-orphans
  
  deploy:
    # needs: ["e2e"]
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: déployer sur le serveur
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${{ secrets.VPS_KEY }}"
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.SERVER_PROD_IP }} >> ~/.ssh/known_hosts
        scp docker-compose.prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_PROD_IP }}:/root/docker-compose.prod.yml
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_PROD_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} &&
          docker compose -f /root/docker-compose.prod.yml up -d --force-recreate"